const config = {
    env: (process.env.NODE_ENV || "development").toLowerCase(),

    baseUrl: "https://beta.recheck.io/",

    defaultLanguage: "EN",
    projectDirPath: __dirname, // don't change
    logsDirPath: `${__dirname}/logs`,
    recheckGuiPath: "../recheck-gui"
};
config.supportedLanguages = [config.defaultLanguage];

const chain = {
    currentNetwork: "AE", // ETH for ethereum network or AE for aeternity network
    isTestnet: true,
    ownerAccount: {
        eth: {
            secretKey: "0x7ad6e1e8b00f9eff52b35fcc0bc94a6d7fcd52b0275609a808a736b3d31bff64"
        },
        ae: {
            publicKey: "ak_2aFpvPdgDHdhcLUEtw8pykT3UDqK7R8R55aEE35aH9hB5Fx3jp",
            secretKey:
                "0032eea4216176c33b0f84cdb3eae52bfaa7dbd80826b17c36f31cbeee1f57a0cf3501ce4a2a2f39016496c1ec44ae6d251f411e07bbd6ac0895f66a4c3ea848"
        }
    }, // only for reading from contracts
    accountActivator: {
        enabled: false
    },
    writeAccounts: {
        eth: [
            {
                publicKey: "",
                secretKey: ""
            }
        ],
        ae: [
            {
                publicKey: "ak_mEMRng9eTTwqkwJGnrDm79pnoi559YPBv3eXX1iphT6hxNemf",
                secretKey:
                    "147978e927ae1860a9b7ebf139e0cb117d050af9974298b759cc2406778fb7cb646e1b3f1d3df74bbffc46b93152bb72f89cffe35121eac60b074e9ed5400372"
            },
            {
                publicKey: "ak_2aXNuumj7bvJLTJc1SfktuxQT2BxooTqadEKtb1n1L7aeSDKqf",
                secretKey:
                    "fc718a69cf845c8103d876c6841152c8f88237514e0b17b68c2c916f61cc6cf4cfd0ddab133a97e8d9b3e0ebc60a07b89df015dd1685728124043cedd27d50b2"
            },
            {
                publicKey: "ak_sxLJ6QavoX23xsDfnkccitqGN6x8mWETGNFgiCQozuuhLrchs",
                secretKey:
                    "681ef48e6f223a11fe86d9b283cfc8ccde0b6b6a8bf6469630f32a3e13f2ed0d73b28355506262ab440aee2064861b41c8b2a660d6cbeee262cfc2d46ac6f26b"
            }
        ]
    } // only for writing in contracts
};
const network = chain.currentNetwork.toLowerCase();
let web3 = {};
let explorerUrl = "";
switch (network.toUpperCase()) {
    case "ETH":
        web3 = {
            network,
            gateway: "https://n105.recheck.io",
            ownerAccount: chain.ownerAccount[network],
            writeAccounts: chain.writeAccounts[network],
            defaultGas: 3000000,
            defaultGasPrice: "25000000000",
            addressReadWrite: "0x0fdE2633F4e8ed2e00F5544EA44dC5DD9a73c147",
            contractAbi: require("./contracts/ETHContractAbi.js").contractAbi,
            addressPrefix: "0x"
        };
        const Web3 = require("web3");
        const tempWeb3 = new Web3(web3.gateway);
        const account = tempWeb3.eth.accounts.privateKeyToAccount(web3.ownerAccount.secretKey);
        web3.ownerAccount.publicKey = account.address;
        // TODO chain to our explorer
        explorerUrl = chain.isTestnet ? "" : "";
        break;
    case "AE":
        web3 = {
            network: chain.currentNetwork.toLowerCase(),
            gateway: chain.isTestnet
                ? "https://sdk-testnet.aepps.com"
                : "https://sdk-mainnet.aepps.com",
            ownerAccount: chain.ownerAccount[network],
            writeAccounts: chain.writeAccounts[network],
            defaultGas: 100000,
            defaultGasPrice: 1000000000,
            addressReadWrite: "ct_L1faE2uDpK9XtUYHv9Vrr4JdwC6s2sPwbMP97uT9YPGuJq1GK",
            contractPath: "../contracts/AEContract.aes",
            networkId: chain.isTestnet ? "ae_uat" : "ae_mainnet",
            ttl: 55,
            compiler: "https://compiler.aepps.com",
            addressPrefix: "re_"
        };

        explorerUrl = chain.isTestnet
            ? "https://explorer.testnet.aeternity.io/transactions/"
            : "https://explorer.aeternity.io/transactions/";
        break;
}

chain.web3 = web3;
chain.explorerUrl = explorerUrl;

const api = {
    maxUpload: "10mb", // example "5mb", "200kb", "2.5mb" max 15MB because of DB column size mediumtext 16MB
    // double because original file size is bigger after base64 and encryption
    defaultResponseObj: {
        status: "OK",
        code: 200,
        apiVersion: "4", // 2020-10-08-f7f66caa050d6e2c183b3c2c07e287b61e1ead07
        blockchain: chain.network,
        isTestnet: chain.isTestnet,
        contractAddress: chain.addressReadWrite,
        // TODO replace baseUrl with string and in credentials add login
        baseUrl: config.baseUrl,
        data: {}
    },
    defaultDataTablesResponseObj: {
        data: [],
        draw: "",
        recordsTotal: 0,
        recordsFiltered: 0
    },
    loginChallengeSignatureExpirationTimeMinutes: 15,
    oldestSupportedLoginDevices: [
        "hammer-0.2.0",
        "android:ReCheck-1.0.27",
        "ios:ReCheck-1.0.27",
        "android:ipOcean-1.0.5",
        "ios:ipOcean-1.0.5"
    ]
};
api.defaultDataTablesResponseObj = {
    ...api.defaultResponseObj,
    ...api.defaultDataTablesResponseObj
};

const db = {
    username: "root",
    password: "root",
    database: "recheck",
    // schema: "public",
    host: "127.0.0.1", // localhost
    port: 3306,
    dialect: "mysql",
    shouldLog: false,
    shouldForceDBSync: true,
    shouldSeedDemoData: false,

    possibleProductTypes: ["other", "product", "service"], // needs change in db enums
    transferTypes: ["wire", "bank", "card", "paypal", "bonus", "user", "invite"],

    defaultUserObj: {
        userId: "###",
        lastToken: "0000",
        lastChallenge: "0000"
    }
};
const dbTest = { ...db, database: "xchainTest", shouldForceDBSync: true, shouldSeedDemoData: true };

// concatinate dirname

const firebase = {
    serviceAccount: `${__dirname}/firebase/firebase-key.json`,
    databaseURL: "https://recheck-f3639.firebaseio.com",
    notificationIcon: `${__dirname}/firebase/recheck-logo.png`,
    defaultTTL: 259200000 // default notification ttl 72 hours in ms
};

const billing = {
    defaultVATPercentage10000: 2000, // 2000/10000=20.00%=0.2000
    defaultTokenEuroPrice: 0.98, // 1 token cost 0.98 EUR excl VAT
    startBonusAmount: 100,
    startBonusUsersLimit: 200000,
    startBonusEndDate: Date.parse("2020-12-31T23:59:59"),
    emailInviteBonusAmount: 5,
    emailInviteMaxBonusCount: 10
};

const defaultApiBodySizeKBSetter = 5120; // not larger than 15MB because of DB column size mediumtext 16MB
function getMaxChunkSizeKB(maxBodySize) {
    let chunkSize;
    try {
        chunkSize = Number.parseFloat(new RegExp(/[0-9.]+/).exec(maxBodySize)[0]) / 2; // divide because original file size is bigger after base64 and encryption
    } catch (ignored) {
        return defaultApiBodySizeKBSetter;
    }

    if (maxBodySize.toLowerCase().endsWith("kb")) {
        return chunkSize;
    }
    if (maxBodySize.endsWith("mb")) {
        return chunkSize * 1024;
    }
    return defaultApiBodySizeKBSetter;
}

function setDefaultFileSizeKB(sizeKB) {
    if (sizeKB > maxFileSizeKB) {
        return maxFileSizeKB;
    }
    return sizeKB;
}
let maxFileSizeKB = getMaxChunkSizeKB();
const defaultFileSizeKB = setDefaultFileSizeKB();
const permissions = {
    loginUrl: `${config.baseUrl}login/`,
    supportSigning: false,
    nullAccessValue: "x",
    hasAccessValue: "1",
    noAccessValue: "0",
    defaultDataCategory: "OTHER"
};
const defaultPermissions = `${permissions.noAccessValue}${permissions.noAccessValue}${permissions.hasAccessValue}`;
const ownerPermissions = `${permissions.hasAccessValue}${permissions.hasAccessValue}${permissions.hasAccessValue}`;
const possibleDataCategories = [
    ...new Set([
        permissions.defaultDataCategory,
        "MEDICAL",
        "FINANCIAL",
        "PERSONAL",
        "INSURANCE",
        "WORK",
        "OWNERSHIP",
        "TERMS"
    ])
].sort();

permissions.defaultPermissions = defaultPermissions;
permissions.ownerPermissions = ownerPermissions;
permissions.possibleDataCategories = possibleDataCategories;
permissions.defaultFileSizeKBSetter = defaultApiBodySizeKBSetter;
permissions.maxFileSizeKB = maxFileSizeKB;
permissions.defaultFileSizeKB = defaultFileSizeKB;

const taskManagers = {
    txManager: {
        activation: "*/2 * * * * *", // activate twice per second
        enabled: true,
        maxRetries: 3,
        queueLimit: 10
    },
    dbManager: {
        emailSelectionLiveDurationInMinutes: 60,
        emailCodeLiveDurationInMinutes: 5,
        emailInviteLiveDurationInDays: 7
    }
};

const server = {
    backendPort: process.env.PORT || 4000,
    host: process.env.IP || "0.0.0.0",
    http: true,
    https: false,
    sessionStore: {
        host: "127.0.0.1", // localhost
        port: 3306,
        user: "root",
        password: "root",
        database: db.database
    },
    session: {
        key: "recheckdocssession",
        proxy: true,
        secret: "A87D56F2299FFFACD",
        store: null,
        resave: false,
        saveUninitialized: false
    },
    JWT: {
        authHeaderName: "authorization",

        JWTOptions: {
            issuer: "xChain",
            subject: "support@xchain.biz",
            audience: config.baseUrl,
            algorithm: "RS256",
            expiresIn: "1h"
        },

        JWTKeysDir: `${__dirname}/keys`
    }
};

const mail = {
    mailGlobalInfo: {
        product: "xChain",
        replyEmail: "support@xchain.biz",
        logo: "https://i.imgur.com/KO1vcE9.png",
        address: "xChain Ltd, Some Avenue. City Some, USA"
    },
    sendMailService: {
        service: "Zoho",
        host: "smtp.zoho.com",
        port: 465,
        secure: true,
        auth: {
            user: "info@recheck.io",
            pass: "re123check456info789"
        }
    }
};
const logger = {
    level: "debug" // switch between debug, error, disabled
};

module.exports = {
    ...config,
    chain,
    api,
    db,
    dbTest,
    billing,
    firebase,
    permissions,
    taskManagers,
    server,
    mail,
    logger
};
